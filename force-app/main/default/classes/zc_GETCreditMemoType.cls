/**
 * zc_GETCreditMemoType
 */
public class zc_GETCreditMemoType implements zc_CreditMemoObjectNSFields, zc_CreditMemoObjectCustomFields, zc_Zuc.MappedProperties {
    /**
     * ID of the corresponding object in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).\n
     * @return integrationIdNS
     */
    public String integrationIdNS { get; set; }

    /**
     * Status of the credit memo\'s synchronization with NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).\n
     * @return integrationStatusNS
     */
    public String integrationStatusNS { get; set; }

    /**
     * Origin of the corresponding object in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).\n
     * @return originNS
     */
    public String originNS { get; set; }

    /**
     * Date when the credit memo was synchronized with NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).\n
     * @return syncDateNS
     */
    public String syncDateNS { get; set; }

    /**
     * Related transaction in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).\n
     * @return transactionNS
     */
    public String transactionNS { get; set; }

    /**
     * The ID of the customer account associated with the credit memo.\n
     * @return accountId
     */
    public String accountId { get; set; }

    /**
     * The total amount of the credit memo.\n
     * @return amount
     */
    public Double amount { get; set; }

    /**
     * The applied amount of the credit memo.\n
     * @return appliedAmount
     */
    public Double appliedAmount { get; set; }

    /**
     * Whether the credit memo automatically applies to the invoice upon posting.\n
     * @return autoApplyUponPosting
     */
    public Boolean autoApplyUponPosting { get; set; }

    /**
     * The ID of the Zuora user who cancelled the credit memo.\n
     * @return cancelledById
     */
    public String cancelledById { get; set; }

    /**
     * The date and time when the credit memo was cancelled, in `yyyy-mm-dd hh:mm:ss` format.\n
     * @return cancelledOn
     */
    public Datetime cancelledOn { get; set; }

    /**
     * Comments about the credit memo.\n
     * @return comment
     */
    public String comment { get; set; }

    /**
     * The ID of the Zuora user who created the credit memo.\n
     * @return createdById
     */
    public String createdById { get; set; }

    /**
     * The date and time when the credit memo was created, in `yyyy-mm-dd hh:mm:ss` format. For example, 2017-03-01 15:31:10.\n
     * @return createdDate
     */
    public Datetime createdDate { get; set; }

    /**
     * The date when the credit memo takes effect, in `yyyy-mm-dd` format. For example, 2017-05-20.\n
     * @return creditMemoDate
     */
    public Date creditMemoDate { get; set; }

    /**
     * A currency defined in the web-based UI administrative settings.\n
     * @return currency
     */
    public String currency { get; set; }

    /**
     * Whether the credit memo is excluded from the rule of automatically applying credit memos to invoices.\n
     * @return excludeFromAutoApplyRules
     */
    public Boolean excludeFromAutoApplyRules { get; set; }

    /**
     * The unique ID of the credit memo.\n
     * @return id
     */
    public String id { get; set; }

    /**
     * The ID of the latest PDF file generated for the credit memo.\n
     * @return latestPDFFileId
     */
    public String latestPDFFileId { get; set; }

    /**
     * The unique identification number of the credit memo.\n
     * @return r_number
     */
    public String r_number { get; set; }

    /**
     * The ID of the Zuora user who posted the credit memo.\n
     * @return postedById
     */
    public String postedById { get; set; }

    /**
     * The date and time when the credit memo was posted, in `yyyy-mm-dd hh:mm:ss` format.\n
     * @return postedOn
     */
    public Datetime postedOn { get; set; }

    /**
     * A code identifying the reason for the transaction. The value must be an existing reason code or empty.\n
     * @return reasonCode
     */
    public String reasonCode { get; set; }

    /**
     * The ID of a referred invoice.\n
     * @return referredInvoiceId
     */
    public String referredInvoiceId { get; set; }

    /**
     * The amount of the refund on the credit memo.\n
     * @return refundAmount
     */
    public Double refundAmount { get; set; }

    /**
     * The source of the credit memo.\n\nPossible values:\n- `BillRun`: The credit memo is generated by a bill run.\n- `API`: The credit memo is created by calling the [Invoice and collect](https://www.zuora.com/developer/api-reference/#operation/POST_TransactionInvoicePayment) operation.\n- `ApiSubscribe`: The credit memo is created by calling the [Create subscription](https://www.zuora.com/developer/api-reference/#operation/POST_Subscription) and [Create account](https://www.zuora.com/developer/api-reference/#operation/POST_Account) operation.\n- `ApiAmend`: The credit memo is created by calling the [Update subscription](https://www.zuora.com/developer/api-reference/#operation/PUT_Subscription) operation.\n- `AdhocFromPrpc`: The credit memo is created from a product rate plan charge through the Zuora UI or by calling the [Create credit memo from charge](https://www.zuora.com/developer/api-reference/#operation/POST_CreditMemoFromPrpc) operation.\n- `AdhocFromInvoice`: The credit memo is created from an invoice or created by reversing an invoice. You can create a credit memo from an invoice through the Zuora UI or by calling the [Create credit memo from invoice](https://www.zuora.com/developer/api-reference/#operation/POST_CreditMemoFromInvoice) operation. You can create a credit memo by reversing an invoice through the Zuora UI or by calling the [Reverse invoice](https://www.zuora.com/developer/api-reference/#operation/PUT_ReverseInvoice) operation.\n
     * @return source
     */
    public String source { get; set; }

    /**
     * The ID of the credit memo source.\n\nIf a credit memo is generated from a bill run, the value is the number of the corresponding bill run. Otherwise, the value is `null`.\n
     * @return sourceId
     */
    public String sourceId { get; set; }

    /**
     * The status of the credit memo.\n
     */
    public enum StatusEnum {
        DRAFT,
        POSTED,
        CANCELED,
        ERROR,
        PENDINGFORTAX,
        GENERATING,
        CANCELINPROGRESS
    }

    /**
     * The status of the credit memo.\n
     * @return status
     */
    public StatusEnum status { get; set; }

    /**
     * Returns `true` if the request was processed successfully.
     * @return success
     */
    public Boolean success { get; set; }

    /**
     * The target date for the credit memo, in `yyyy-mm-dd` format. For example, 2017-07-20.\n
     * @return targetDate
     */
    public Date targetDate { get; set; }

    /**
     * The amount of taxation.\n
     * @return taxAmount
     */
    public Double taxAmount { get; set; }

    /**
     * The message about the status of tax calculation related to the credit memo. If tax calculation fails in one credit memo, this field displays the reason for the failure.\n
     * @return taxMessage
     */
    public String taxMessage { get; set; }

    /**
     * The status of tax calculation related to the credit memo.\n\n**Note**: This field is only applicable to tax calculation by third-party tax engines.\n
     */
    public enum TaxStatusEnum {
        COMPLETED,
        ERROR
    }

    /**
     * The status of tax calculation related to the credit memo.\n\n**Note**: This field is only applicable to tax calculation by third-party tax engines.\n
     * @return taxStatus
     */
    public TaxStatusEnum taxStatus { get; set; }

    /**
     * The total amount of taxes or VAT for which the customer has an exemption.\n
     * @return totalTaxExemptAmount
     */
    public Double totalTaxExemptAmount { get; set; }

    /**
     * Whether the credit memo was transferred to an external accounting system. Use this field for integration with accounting systems, such as NetSuite. \n
     */
    public enum TransferredToAccountingEnum {
        PROCESSING,
        YES,
        NO,
        ERROR,
        IGNORE
    }

    /**
     * Whether the credit memo was transferred to an external accounting system. Use this field for integration with accounting systems, such as NetSuite. \n
     * @return transferredToAccounting
     */
    public TransferredToAccountingEnum transferredToAccounting { get; set; }

    /**
     * The unapplied amount of the credit memo.\n
     * @return unappliedAmount
     */
    public Double unappliedAmount { get; set; }

    /**
     * The ID of the Zuora user who last updated the credit memo.\n
     * @return updatedById
     */
    public String updatedById { get; set; }

    /**
     * The date and time when the credit memo was last updated, in `yyyy-mm-dd hh:mm:ss` format. For example, 2017-03-01 15:36:10.\n
     * @return updatedDate
     */
    public Datetime updatedDate { get; set; }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'IntegrationId__NS' => 'integrationIdNS',
        'IntegrationStatus__NS' => 'integrationStatusNS',
        'Origin__NS' => 'originNS',
        'SyncDate__NS' => 'syncDateNS',
        'Transaction__NS' => 'transactionNS',
        'number' => 'r_number'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    public static zc_GETCreditMemoType getExample() {
        zc_GETCreditMemoType geTCreditMemoType = new zc_GETCreditMemoType();
        geTCreditMemoType.integrationIdNS = 'aeiou';
        geTCreditMemoType.integrationStatusNS = 'aeiou';
        geTCreditMemoType.originNS = 'aeiou';
        geTCreditMemoType.syncDateNS = 'aeiou';
        geTCreditMemoType.transactionNS = 'aeiou';
        geTCreditMemoType.accountId = 'aeiou';
        geTCreditMemoType.amount = 1.3579;
        geTCreditMemoType.appliedAmount = 1.3579;
        geTCreditMemoType.autoApplyUponPosting = true;
        geTCreditMemoType.cancelledById = 'aeiou';
        geTCreditMemoType.cancelledOn = Datetime.newInstanceGmt(2000, 1, 23, 4, 56, 7);
        geTCreditMemoType.comment = 'aeiou';
        geTCreditMemoType.createdById = 'aeiou';
        geTCreditMemoType.createdDate = Datetime.newInstanceGmt(2000, 1, 23, 4, 56, 7);
        geTCreditMemoType.creditMemoDate = Date.newInstance(2000, 1, 23);
        geTCreditMemoType.currency = 'aeiou';
        geTCreditMemoType.excludeFromAutoApplyRules = true;
        geTCreditMemoType.id = 'aeiou';
        geTCreditMemoType.latestPDFFileId = 'aeiou';
        geTCreditMemoType.r_number = 'aeiou';
        geTCreditMemoType.postedById = 'aeiou';
        geTCreditMemoType.postedOn = Datetime.newInstanceGmt(2000, 1, 23, 4, 56, 7);
        geTCreditMemoType.reasonCode = 'aeiou';
        geTCreditMemoType.referredInvoiceId = 'aeiou';
        geTCreditMemoType.refundAmount = 1.3579;
        geTCreditMemoType.source = 'aeiou';
        geTCreditMemoType.sourceId = 'aeiou';
        geTCreditMemoType.status = StatusEnum.DRAFT;
        geTCreditMemoType.success = true;
        geTCreditMemoType.targetDate = Date.newInstance(2000, 1, 23);
        geTCreditMemoType.taxAmount = 1.3579;
        geTCreditMemoType.taxMessage = 'aeiou';
        geTCreditMemoType.taxStatus = TaxStatusEnum.COMPLETED;
        geTCreditMemoType.totalTaxExemptAmount = 1.3579;
        geTCreditMemoType.transferredToAccounting = TransferredToAccountingEnum.PROCESSING;
        geTCreditMemoType.unappliedAmount = 1.3579;
        geTCreditMemoType.updatedById = 'aeiou';
        geTCreditMemoType.updatedDate = Datetime.newInstanceGmt(2000, 1, 23, 4, 56, 7);
        return geTCreditMemoType;
    }

    public Boolean equals(Object obj) {
        if (obj instanceof zc_GETCreditMemoType) {
            zc_GETCreditMemoType geTCreditMemoType = (zc_GETCreditMemoType) obj;
            return this.integrationIdNS == geTCreditMemoType.integrationIdNS
                && this.integrationStatusNS == geTCreditMemoType.integrationStatusNS
                && this.originNS == geTCreditMemoType.originNS
                && this.syncDateNS == geTCreditMemoType.syncDateNS
                && this.transactionNS == geTCreditMemoType.transactionNS
                && this.accountId == geTCreditMemoType.accountId
                && this.amount == geTCreditMemoType.amount
                && this.appliedAmount == geTCreditMemoType.appliedAmount
                && this.autoApplyUponPosting == geTCreditMemoType.autoApplyUponPosting
                && this.cancelledById == geTCreditMemoType.cancelledById
                && this.cancelledOn == geTCreditMemoType.cancelledOn
                && this.comment == geTCreditMemoType.comment
                && this.createdById == geTCreditMemoType.createdById
                && this.createdDate == geTCreditMemoType.createdDate
                && this.creditMemoDate == geTCreditMemoType.creditMemoDate
                && this.currency == geTCreditMemoType.currency
                && this.excludeFromAutoApplyRules == geTCreditMemoType.excludeFromAutoApplyRules
                && this.id == geTCreditMemoType.id
                && this.latestPDFFileId == geTCreditMemoType.latestPDFFileId
                && this.r_number == geTCreditMemoType.r_number
                && this.postedById == geTCreditMemoType.postedById
                && this.postedOn == geTCreditMemoType.postedOn
                && this.reasonCode == geTCreditMemoType.reasonCode
                && this.referredInvoiceId == geTCreditMemoType.referredInvoiceId
                && this.refundAmount == geTCreditMemoType.refundAmount
                && this.source == geTCreditMemoType.source
                && this.sourceId == geTCreditMemoType.sourceId
                && this.status == geTCreditMemoType.status
                && this.success == geTCreditMemoType.success
                && this.targetDate == geTCreditMemoType.targetDate
                && this.taxAmount == geTCreditMemoType.taxAmount
                && this.taxMessage == geTCreditMemoType.taxMessage
                && this.taxStatus == geTCreditMemoType.taxStatus
                && this.totalTaxExemptAmount == geTCreditMemoType.totalTaxExemptAmount
                && this.transferredToAccounting == geTCreditMemoType.transferredToAccounting
                && this.unappliedAmount == geTCreditMemoType.unappliedAmount
                && this.updatedById == geTCreditMemoType.updatedById
                && this.updatedDate == geTCreditMemoType.updatedDate;
        }
        return false;
    }

    public Integer hashCode() {
        Integer hashCode = 43;
        hashCode = (17 * hashCode) + (integrationIdNS == null ? 0 : System.hashCode(integrationIdNS));
        hashCode = (17 * hashCode) + (integrationStatusNS == null ? 0 : System.hashCode(integrationStatusNS));
        hashCode = (17 * hashCode) + (originNS == null ? 0 : System.hashCode(originNS));
        hashCode = (17 * hashCode) + (syncDateNS == null ? 0 : System.hashCode(syncDateNS));
        hashCode = (17 * hashCode) + (transactionNS == null ? 0 : System.hashCode(transactionNS));
        hashCode = (17 * hashCode) + (accountId == null ? 0 : System.hashCode(accountId));
        hashCode = (17 * hashCode) + (amount == null ? 0 : System.hashCode(amount));
        hashCode = (17 * hashCode) + (appliedAmount == null ? 0 : System.hashCode(appliedAmount));
        hashCode = (17 * hashCode) + (autoApplyUponPosting == null ? 0 : System.hashCode(autoApplyUponPosting));
        hashCode = (17 * hashCode) + (cancelledById == null ? 0 : System.hashCode(cancelledById));
        hashCode = (17 * hashCode) + (cancelledOn == null ? 0 : System.hashCode(cancelledOn));
        hashCode = (17 * hashCode) + (comment == null ? 0 : System.hashCode(comment));
        hashCode = (17 * hashCode) + (createdById == null ? 0 : System.hashCode(createdById));
        hashCode = (17 * hashCode) + (createdDate == null ? 0 : System.hashCode(createdDate));
        hashCode = (17 * hashCode) + (creditMemoDate == null ? 0 : System.hashCode(creditMemoDate));
        hashCode = (17 * hashCode) + (currency == null ? 0 : System.hashCode(currency));
        hashCode = (17 * hashCode) + (excludeFromAutoApplyRules == null ? 0 : System.hashCode(excludeFromAutoApplyRules));
        hashCode = (17 * hashCode) + (id == null ? 0 : System.hashCode(id));
        hashCode = (17 * hashCode) + (latestPDFFileId == null ? 0 : System.hashCode(latestPDFFileId));
        hashCode = (17 * hashCode) + (r_number == null ? 0 : System.hashCode(r_number));
        hashCode = (17 * hashCode) + (postedById == null ? 0 : System.hashCode(postedById));
        hashCode = (17 * hashCode) + (postedOn == null ? 0 : System.hashCode(postedOn));
        hashCode = (17 * hashCode) + (reasonCode == null ? 0 : System.hashCode(reasonCode));
        hashCode = (17 * hashCode) + (referredInvoiceId == null ? 0 : System.hashCode(referredInvoiceId));
        hashCode = (17 * hashCode) + (refundAmount == null ? 0 : System.hashCode(refundAmount));
        hashCode = (17 * hashCode) + (source == null ? 0 : System.hashCode(source));
        hashCode = (17 * hashCode) + (sourceId == null ? 0 : System.hashCode(sourceId));
        hashCode = (17 * hashCode) + (status == null ? 0 : System.hashCode(status));
        hashCode = (17 * hashCode) + (success == null ? 0 : System.hashCode(success));
        hashCode = (17 * hashCode) + (targetDate == null ? 0 : System.hashCode(targetDate));
        hashCode = (17 * hashCode) + (taxAmount == null ? 0 : System.hashCode(taxAmount));
        hashCode = (17 * hashCode) + (taxMessage == null ? 0 : System.hashCode(taxMessage));
        hashCode = (17 * hashCode) + (taxStatus == null ? 0 : System.hashCode(taxStatus));
        hashCode = (17 * hashCode) + (totalTaxExemptAmount == null ? 0 : System.hashCode(totalTaxExemptAmount));
        hashCode = (17 * hashCode) + (transferredToAccounting == null ? 0 : System.hashCode(transferredToAccounting));
        hashCode = (17 * hashCode) + (unappliedAmount == null ? 0 : System.hashCode(unappliedAmount));
        hashCode = (17 * hashCode) + (updatedById == null ? 0 : System.hashCode(updatedById));
        hashCode = (17 * hashCode) + (updatedDate == null ? 0 : System.hashCode(updatedDate));
        return hashCode;
    }
}

